<?xml version="1.0" encoding="UTF-8"?>
<root>
    <item name="java.awt.AWTEvent AWTEvent(java.awt.Event) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEvent java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEvent java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster T[] getListeners(java.util.EventListener, java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster T[] getListeners(java.util.EventListener, java.lang.Class&lt;T&gt;) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void adjustmentValueChanged(java.awt.event.AdjustmentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void componentAdded(java.awt.event.ContainerEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void componentHidden(java.awt.event.ComponentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void componentMoved(java.awt.event.ComponentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void componentRemoved(java.awt.event.ContainerEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void componentResized(java.awt.event.ComponentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void componentShown(java.awt.event.ComponentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void focusGained(java.awt.event.FocusEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void focusLost(java.awt.event.FocusEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void hierarchyChanged(java.awt.event.HierarchyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void itemStateChanged(java.awt.event.ItemEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void keyPressed(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void keyTyped(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void mouseClicked(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void mouseDragged(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void mouseEntered(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void mouseExited(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void mouseMoved(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void mousePressed(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void mouseReleased(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTEventMulticaster void windowClosing(java.awt.event.WindowEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTKeyStroke java.awt.AWTKeyStroke getAWTKeyStroke(char)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTKeyStroke java.awt.AWTKeyStroke getAWTKeyStroke(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTKeyStroke java.awt.AWTKeyStroke getAWTKeyStroke(int, int, boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTKeyStroke java.awt.AWTKeyStroke getAWTKeyStroke(java.lang.Character, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTKeyStroke java.awt.AWTKeyStroke getAWTKeyStroke(java.lang.Character, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTKeyStroke java.awt.AWTKeyStroke getAWTKeyStroke(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTKeyStroke java.awt.AWTKeyStroke getAWTKeyStroke(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTKeyStroke java.awt.AWTKeyStroke getAWTKeyStrokeForEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTKeyStroke java.lang.Object readResolve()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTKeyStroke java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AWTKeyStroke void registerSubclass(java.lang.Class&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AlphaComposite java.awt.AlphaComposite derive(float)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AlphaComposite java.awt.AlphaComposite derive(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AlphaComposite java.awt.AlphaComposite getInstance(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AlphaComposite java.awt.AlphaComposite getInstance(int, float)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.AlphaComposite java.awt.CompositeContext createContext(java.awt.image.ColorModel, java.awt.image.ColorModel, java.awt.RenderingHints)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout java.awt.Component getLayoutComponent(java.awt.Container, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout void invalidateLayout(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BorderLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BufferCapabilities BufferCapabilities(java.awt.ImageCapabilities, java.awt.ImageCapabilities, java.awt.BufferCapabilities.FlipContents) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.BufferCapabilities BufferCapabilities(java.awt.ImageCapabilities, java.awt.ImageCapabilities, java.awt.BufferCapabilities.FlipContents) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Button T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Button java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Button.AccessibleAWTButton javax.accessibility.AccessibleAction getAccessibleAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Button.AccessibleAWTButton javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Button.AccessibleAWTButton javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Canvas void createBufferStrategy(int, java.awt.BufferCapabilities) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Canvas void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Canvas void update(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Canvas.AccessibleAWTCanvas javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout void first(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout void invalidateLayout(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout void last(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout void next(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout void previous(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CardLayout void show(java.awt.Container, java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Checkbox T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Checkbox java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Checkbox.AccessibleAWTCheckbox AccessibleAWTCheckbox(java.awt.Checkbox) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Checkbox.AccessibleAWTCheckbox javax.accessibility.AccessibleAction getAccessibleAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Checkbox.AccessibleAWTCheckbox javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Checkbox.AccessibleAWTCheckbox javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Checkbox.AccessibleAWTCheckbox javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Checkbox.AccessibleAWTCheckbox void itemStateChanged(java.awt.event.ItemEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CheckboxGroup java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CheckboxMenuItem T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CheckboxMenuItem T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CheckboxMenuItem java.awt.event.ItemListener[] getItemListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CheckboxMenuItem java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem javax.accessibility.AccessibleAction getAccessibleAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Choice T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Choice java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Choice.AccessibleAWTChoice javax.accessibility.AccessibleAction getAccessibleAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Choice.AccessibleAWTChoice javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color Color(java.awt.color.ColorSpace, float[], float) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color float[] RGBtoHSB(int, int, int, float[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color float[] getColorComponents(java.awt.color.ColorSpace, float[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color float[] getComponents(float[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color float[] getComponents(float[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color float[] getComponents(java.awt.color.ColorSpace, float[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color float[] getComponents(java.awt.color.ColorSpace, float[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color float[] getRGBColorComponents(float[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color float[] getRGBColorComponents(float[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color float[] getRGBComponents(float[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color float[] getRGBComponents(float[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.Color brighter()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.Color darker()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.Color decode(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.Color decode(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.Color getColor(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.Color getColor(java.lang.String, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.Color getColor(java.lang.String, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.Color getColor(java.lang.String, java.awt.Color) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.Color getHSBColor(float, float, float)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Color java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component boolean contains(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component boolean handleEvent(java.awt.Event) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component boolean postEvent(java.awt.Event) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.awt.Component getComponentAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.awt.Component.BaselineResizeBehavior getBaselineResizeBehavior()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.awt.Dimension getSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.awt.Dimension getSize(java.awt.Dimension)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.awt.Dimension size()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.awt.Point getLocation()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.awt.Point getLocation(java.awt.Point)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.awt.Point location()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.awt.Rectangle bounds()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.awt.Rectangle getBounds()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.awt.Rectangle getBounds(java.awt.Rectangle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.lang.Object getTreeLock()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component java.util.Locale getLocale()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component javax.accessibility.AccessibleContext getAccessibleContext()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void add(java.awt.PopupMenu) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void applyComponentOrientation(java.awt.ComponentOrientation) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void createBufferStrategy(int, java.awt.BufferCapabilities) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void deliverEvent(java.awt.Event) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void dispatchEvent(java.awt.AWTEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void list(java.io.PrintStream) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void list(java.io.PrintStream, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void list(java.io.PrintWriter) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void list(java.io.PrintWriter, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void processFocusEvent(java.awt.event.FocusEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void processInputMethodEvent(java.awt.event.InputMethodEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void processKeyEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void processMouseEvent(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void resize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void setBounds(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void setLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void setSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component void update(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent boolean contains(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent javax.accessibility.AccessibleComponent getAccessibleComponent()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent void setBounds(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent void setLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent void setSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent.AccessibleAWTComponentHandler void componentHidden(java.awt.event.ComponentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent.AccessibleAWTComponentHandler void componentMoved(java.awt.event.ComponentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent.AccessibleAWTComponentHandler void componentResized(java.awt.event.ComponentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent.AccessibleAWTComponentHandler void componentShown(java.awt.event.ComponentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent.AccessibleAWTFocusHandler void focusGained(java.awt.event.FocusEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.AccessibleAWTComponent.AccessibleAWTFocusHandler void focusLost(java.awt.event.FocusEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.BaselineResizeBehavior java.awt.Component.BaselineResizeBehavior valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.FlipBufferStrategy FlipBufferStrategy(java.awt.Component, int, java.awt.BufferCapabilities) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.FlipBufferStrategy FlipBufferStrategy(java.awt.Component, int, java.awt.BufferCapabilities) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Component.FlipBufferStrategy void createBuffers(int, java.awt.BufferCapabilities) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ComponentOrientation java.awt.ComponentOrientation getOrientation(java.util.Locale)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ComponentOrientation java.awt.ComponentOrientation getOrientation(java.util.Locale) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ComponentOrientation java.awt.ComponentOrientation getOrientation(java.util.ResourceBundle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ComponentOrientation java.awt.ComponentOrientation getOrientation(java.util.ResourceBundle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Composite java.awt.CompositeContext createContext(java.awt.image.ColorModel, java.awt.image.ColorModel, java.awt.RenderingHints)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container java.awt.Component add(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container java.awt.Component add(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container java.awt.Component add(java.awt.Component, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container java.awt.Component add(java.awt.Component, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container java.awt.Component add(java.lang.String, java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container java.awt.Component add(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container java.awt.Component findComponentAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container java.awt.Component getComponentAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container java.awt.Insets getInsets()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container void add(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container void add(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container void applyComponentOrientation(java.awt.ComponentOrientation) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container void deliverEvent(java.awt.Event) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container void list(java.io.PrintStream, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container void list(java.io.PrintWriter, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container void remove(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container void setComponentZOrder(java.awt.Component, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container void update(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container.AccessibleAWTContainer javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container.AccessibleAWTContainer.AccessibleContainerHandler void componentAdded(java.awt.event.ContainerEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Container.AccessibleAWTContainer.AccessibleContainerHandler void componentRemoved(java.awt.event.ContainerEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ContainerOrderFocusTraversalPolicy boolean accept(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ContainerOrderFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ContainerOrderFocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ContainerOrderFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ContainerOrderFocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ContainerOrderFocusTraversalPolicy java.awt.Component getDefaultComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ContainerOrderFocusTraversalPolicy java.awt.Component getFirstComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ContainerOrderFocusTraversalPolicy java.awt.Component getLastComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Cursor java.awt.Cursor getDefaultCursor()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Cursor java.awt.Cursor getPredefinedCursor(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Cursor java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.DefaultFocusTraversalPolicy boolean accept(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.DefaultKeyboardFocusManager boolean dispatchEvent(java.awt.AWTEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.DefaultKeyboardFocusManager boolean dispatchKeyEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.DefaultKeyboardFocusManager boolean postProcessKeyEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.DefaultKeyboardFocusManager void processKeyEvent(java.awt.Component, java.awt.event.KeyEvent) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Desktop java.awt.Desktop getDesktop()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Desktop void browse(java.net.URI) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Desktop void edit(java.io.File) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Desktop void mail(java.net.URI) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Desktop void open(java.io.File) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Desktop void print(java.io.File) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Desktop.Action java.awt.Desktop.Action valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Dialog java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Dialog.AccessibleAWTDialog javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Dialog.ModalExclusionType java.awt.Dialog.ModalExclusionType valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Dialog.ModalityType java.awt.Dialog.ModalityType valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Dimension Dimension(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Dimension java.awt.Dimension getSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Dimension java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Dimension void setSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Event java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Event java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.EventFilter.FilterAction java.awt.EventFilter.FilterAction valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.EventQueue java.awt.AWTEvent getNextEvent()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.EventQueue void dispatchEvent(java.awt.AWTEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.EventQueue void push(java.awt.EventQueue) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FileDialog java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FlowLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FlowLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FlowLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FlowLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FlowLayout java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FlowLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FlowLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FlowLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FlowLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FocusTraversalPolicy java.awt.Component getComponentAfter(java.awt.Container, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FocusTraversalPolicy java.awt.Component getComponentBefore(java.awt.Container, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FocusTraversalPolicy java.awt.Component getDefaultComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FocusTraversalPolicy java.awt.Component getFirstComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FocusTraversalPolicy java.awt.Component getInitialComponent(java.awt.Window) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FocusTraversalPolicy java.awt.Component getLastComponent(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font Font(java.awt.Font) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font int canDisplayUpTo(char[], int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font int canDisplayUpTo(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font int canDisplayUpTo(java.text.CharacterIterator, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font createFont(int, java.io.File)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font createFont(int, java.io.File) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font createFont(int, java.io.InputStream)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font createFont(int, java.io.InputStream) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font decode(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font deriveFont(float)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font deriveFont(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font deriveFont(int, float)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font deriveFont(int, java.awt.geom.AffineTransform)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font deriveFont(int, java.awt.geom.AffineTransform) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font deriveFont(java.awt.geom.AffineTransform)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font deriveFont(java.awt.geom.AffineTransform) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font deriveFont(java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font getFont(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font getFont(java.lang.String, java.awt.Font) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.Font getFont(java.util.Map&lt;? extends java.text.AttributedCharacterIterator.Attribute,?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext, char[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext, int[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext, java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext, java.text.CharacterIterator)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.font.LineMetrics getLineMetrics(char[], int, int, java.awt.font.FontRenderContext)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.font.LineMetrics getLineMetrics(java.lang.String, int, int, java.awt.font.FontRenderContext)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.font.LineMetrics getLineMetrics(java.lang.String, java.awt.font.FontRenderContext)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.font.LineMetrics getLineMetrics(java.lang.String, java.awt.font.FontRenderContext) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.font.LineMetrics getLineMetrics(java.text.CharacterIterator, int, int, java.awt.font.FontRenderContext)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.geom.AffineTransform getTransform()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.geom.Rectangle2D getStringBounds(char[], int, int, java.awt.font.FontRenderContext) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.geom.Rectangle2D getStringBounds(java.lang.String, int, int, java.awt.font.FontRenderContext) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.geom.Rectangle2D getStringBounds(java.lang.String, java.awt.font.FontRenderContext) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.awt.geom.Rectangle2D getStringBounds(java.text.CharacterIterator, int, int, java.awt.font.FontRenderContext) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.lang.String getFamily(java.util.Locale) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.lang.String getFontName(java.util.Locale) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.text.AttributedCharacterIterator.Attribute[] getAvailableAttributes()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Font java.util.Map&lt;java.awt.font.TextAttribute,?&gt; getAttributes()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics int stringWidth(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics int[] getWidths()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.awt.font.FontRenderContext getFontRenderContext()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.awt.font.LineMetrics getLineMetrics(char[], int, int, java.awt.Graphics)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.awt.font.LineMetrics getLineMetrics(java.lang.String, int, int, java.awt.Graphics)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.awt.font.LineMetrics getLineMetrics(java.lang.String, java.awt.Graphics)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.awt.font.LineMetrics getLineMetrics(java.lang.String, java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.awt.font.LineMetrics getLineMetrics(java.text.CharacterIterator, int, int, java.awt.Graphics)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.Graphics)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.awt.geom.Rectangle2D getStringBounds(char[], int, int, java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.awt.geom.Rectangle2D getStringBounds(java.lang.String, int, int, java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.awt.geom.Rectangle2D getStringBounds(java.lang.String, java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.awt.geom.Rectangle2D getStringBounds(java.text.CharacterIterator, int, int, java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.FontMetrics java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Frame java.awt.Frame[] getFrames()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Frame java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Frame.AccessibleAWTFrame javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GradientPaint GradientPaint(float, float, java.awt.Color, float, float, java.awt.Color) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GradientPaint GradientPaint(float, float, java.awt.Color, float, float, java.awt.Color) 5">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GradientPaint GradientPaint(java.awt.geom.Point2D, java.awt.Color, java.awt.geom.Point2D, java.awt.Color) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GradientPaint GradientPaint(java.awt.geom.Point2D, java.awt.Color, java.awt.geom.Point2D, java.awt.Color) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GradientPaint GradientPaint(java.awt.geom.Point2D, java.awt.Color, java.awt.geom.Point2D, java.awt.Color) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GradientPaint GradientPaint(java.awt.geom.Point2D, java.awt.Color, java.awt.geom.Point2D, java.awt.Color) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GradientPaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GradientPaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GradientPaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GradientPaint java.awt.geom.Point2D getPoint1()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GradientPaint java.awt.geom.Point2D getPoint2()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Graphics java.awt.Graphics create()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Graphics java.awt.Rectangle getClipBounds(java.awt.Rectangle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Graphics java.awt.Rectangle getClipBounds(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Graphics java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Graphics void drawPolygon(java.awt.Polygon) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Graphics void fillPolygon(java.awt.Polygon) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GraphicsConfiguration java.awt.image.BufferedImage createCompatibleImage(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GraphicsConfiguration java.awt.image.BufferedImage createCompatibleImage(int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GraphicsConfiguration java.awt.image.VolatileImage createCompatibleVolatileImage(int, int, java.awt.ImageCapabilities)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GraphicsConfiguration java.awt.image.VolatileImage createCompatibleVolatileImage(int, int, java.awt.ImageCapabilities, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GraphicsDevice boolean isWindowTranslucencySupported(java.awt.GraphicsDevice.WindowTranslucency) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GraphicsDevice java.awt.DisplayMode getDisplayMode()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GraphicsDevice java.awt.DisplayMode[] getDisplayModes()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GraphicsDevice java.awt.GraphicsConfiguration getBestConfiguration(java.awt.GraphicsConfigTemplate) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GraphicsDevice.WindowTranslucency java.awt.GraphicsDevice.WindowTranslucency valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GraphicsEnvironment boolean registerFont(java.awt.Font) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GraphicsEnvironment java.awt.Point getCenterPoint()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagConstraints java.lang.Object clone()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout double[][] getLayoutWeights()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout int[][] getLayoutDimensions()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension GetMinSize(java.awt.Container, java.awt.GridBagLayoutInfo)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension GetMinSize(java.awt.Container, java.awt.GridBagLayoutInfo) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension GetMinSize(java.awt.Container, java.awt.GridBagLayoutInfo) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension getMinSize(java.awt.Container, java.awt.GridBagLayoutInfo)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension getMinSize(java.awt.Container, java.awt.GridBagLayoutInfo) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension getMinSize(java.awt.Container, java.awt.GridBagLayoutInfo) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension maximumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.GridBagConstraints getConstraints(java.awt.Component)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.GridBagLayoutInfo GetLayoutInfo(java.awt.Container, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.GridBagLayoutInfo GetLayoutInfo(java.awt.Container, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.GridBagLayoutInfo getLayoutInfo(java.awt.Container, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.GridBagLayoutInfo getLayoutInfo(java.awt.Container, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Point getLayoutOrigin()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.awt.Point location(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void AdjustForGravity(java.awt.GridBagConstraints, java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void AdjustForGravity(java.awt.GridBagConstraints, java.awt.Rectangle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void ArrangeGrid(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void adjustForGravity(java.awt.GridBagConstraints, java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void adjustForGravity(java.awt.GridBagConstraints, java.awt.Rectangle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void arrangeGrid(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void invalidateLayout(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridBagLayout void setConstraints(java.awt.Component, java.awt.GridBagConstraints) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridLayout java.awt.Dimension minimumLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridLayout java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridLayout java.awt.Dimension preferredLayoutSize(java.awt.Container)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridLayout java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridLayout java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridLayout void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridLayout void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridLayout void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.GridLayout void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Image java.lang.Object getProperty(java.lang.String, java.awt.image.ImageObserver)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Image java.lang.Object getProperty(java.lang.String, java.awt.image.ImageObserver) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Insets java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes JobAttributes(int, java.awt.JobAttributes.DefaultSelectionType, java.awt.JobAttributes.DestinationType, java.awt.JobAttributes.DialogType, java.lang.String, int, int, java.awt.JobAttributes.MultipleDocumentHandlingType, int[][], java.lang.String, java.awt.JobAttributes.SidesType) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes JobAttributes(int, java.awt.JobAttributes.DefaultSelectionType, java.awt.JobAttributes.DestinationType, java.awt.JobAttributes.DialogType, java.lang.String, int, int, java.awt.JobAttributes.MultipleDocumentHandlingType, int[][], java.lang.String, java.awt.JobAttributes.SidesType) 10">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes JobAttributes(int, java.awt.JobAttributes.DefaultSelectionType, java.awt.JobAttributes.DestinationType, java.awt.JobAttributes.DialogType, java.lang.String, int, int, java.awt.JobAttributes.MultipleDocumentHandlingType, int[][], java.lang.String, java.awt.JobAttributes.SidesType) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes JobAttributes(int, java.awt.JobAttributes.DefaultSelectionType, java.awt.JobAttributes.DestinationType, java.awt.JobAttributes.DialogType, java.lang.String, int, int, java.awt.JobAttributes.MultipleDocumentHandlingType, int[][], java.lang.String, java.awt.JobAttributes.SidesType) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes JobAttributes(int, java.awt.JobAttributes.DefaultSelectionType, java.awt.JobAttributes.DestinationType, java.awt.JobAttributes.DialogType, java.lang.String, int, int, java.awt.JobAttributes.MultipleDocumentHandlingType, int[][], java.lang.String, java.awt.JobAttributes.SidesType) 7">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes JobAttributes(int, java.awt.JobAttributes.DefaultSelectionType, java.awt.JobAttributes.DestinationType, java.awt.JobAttributes.DialogType, java.lang.String, int, int, java.awt.JobAttributes.MultipleDocumentHandlingType, int[][], java.lang.String, java.awt.JobAttributes.SidesType) 8">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes JobAttributes(java.awt.JobAttributes) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes int[][] getPageRanges()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes void set(java.awt.JobAttributes) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes void setDefaultSelection(java.awt.JobAttributes.DefaultSelectionType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes void setDestination(java.awt.JobAttributes.DestinationType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes void setDialog(java.awt.JobAttributes.DialogType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes void setMultipleDocumentHandling(java.awt.JobAttributes.MultipleDocumentHandlingType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes void setPageRanges(int[][]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.JobAttributes void setSides(java.awt.JobAttributes.SidesType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.KeyEventDispatcher boolean dispatchKeyEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.KeyEventPostProcessor boolean postProcessKeyEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.KeyboardFocusManager boolean dispatchEvent(java.awt.AWTEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.KeyboardFocusManager boolean dispatchKeyEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.KeyboardFocusManager boolean postProcessKeyEvent(java.awt.event.KeyEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.KeyboardFocusManager java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.KeyboardFocusManager void processKeyEvent(java.awt.Component, java.awt.event.KeyEvent) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.KeyboardFocusManager void redispatchEvent(java.awt.Component, java.awt.AWTEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.KeyboardFocusManager void redispatchEvent(java.awt.Component, java.awt.AWTEvent) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.KeyboardFocusManager void setDefaultFocusTraversalKeys(int, java.util.Set&lt;? extends java.awt.AWTKeyStroke&gt;) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.KeyboardFocusManager void setDefaultFocusTraversalPolicy(java.awt.FocusTraversalPolicy) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Label java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Label.AccessibleAWTLabel javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LayoutManager java.awt.Dimension minimumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LayoutManager java.awt.Dimension preferredLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LayoutManager void addLayoutComponent(java.lang.String, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LayoutManager void addLayoutComponent(java.lang.String, java.awt.Component) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LayoutManager void layoutContainer(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LayoutManager void removeLayoutComponent(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LayoutManager2 java.awt.Dimension maximumLayoutSize(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LayoutManager2 void addLayoutComponent(java.awt.Component, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LayoutManager2 void invalidateLayout(java.awt.Container) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LinearGradientPaint LinearGradientPaint(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod, java.awt.MultipleGradientPaint.ColorSpaceType, java.awt.geom.AffineTransform) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LinearGradientPaint LinearGradientPaint(java.awt.geom.Point2D, java.awt.geom.Point2D, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod, java.awt.MultipleGradientPaint.ColorSpaceType, java.awt.geom.AffineTransform) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LinearGradientPaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LinearGradientPaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LinearGradientPaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LinearGradientPaint java.awt.geom.Point2D getEndPoint()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.LinearGradientPaint java.awt.geom.Point2D getStartPoint()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List java.lang.Object[] getSelectedObjects()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List java.lang.String[] getItems()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List java.lang.String[] getSelectedItems()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList AccessibleAWTList(java.awt.List) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList javax.accessibility.AccessibleSelection getAccessibleSelection()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList void itemStateChanged(java.awt.event.ItemEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList.AccessibleAWTListChild AccessibleAWTListChild(java.awt.List.AccessibleAWTList, java.awt.List, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList.AccessibleAWTListChild boolean contains(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList.AccessibleAWTListChild javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList.AccessibleAWTListChild javax.accessibility.AccessibleContext getAccessibleContext()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList.AccessibleAWTListChild javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList.AccessibleAWTListChild javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList.AccessibleAWTListChild void setBounds(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList.AccessibleAWTListChild void setLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.List.AccessibleAWTList.AccessibleAWTListChild void setSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Menu java.awt.MenuItem add(java.awt.MenuItem)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Menu java.awt.MenuItem add(java.awt.MenuItem) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Menu java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Menu void insert(java.awt.MenuItem, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Menu.AccessibleAWTMenu javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuBar java.awt.Menu add(java.awt.Menu)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuBar java.awt.Menu add(java.awt.Menu) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuBar java.util.Enumeration&lt;java.awt.MenuShortcut&gt; shortcuts()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuBar.AccessibleAWTMenuBar javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuComponent java.lang.Object getTreeLock()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuComponent java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuComponent.AccessibleAWTMenuComponent boolean contains(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuComponent.AccessibleAWTMenuComponent javax.accessibility.Accessible getAccessibleAt(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuComponent.AccessibleAWTMenuComponent javax.accessibility.AccessibleComponent getAccessibleComponent()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuComponent.AccessibleAWTMenuComponent javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuComponent.AccessibleAWTMenuComponent javax.accessibility.AccessibleSelection getAccessibleSelection()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuComponent.AccessibleAWTMenuComponent javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuComponent.AccessibleAWTMenuComponent void setBounds(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuComponent.AccessibleAWTMenuComponent void setLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuComponent.AccessibleAWTMenuComponent void setSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuContainer boolean postEvent(java.awt.Event) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuItem T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuItem T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuItem java.awt.event.ActionListener[] getActionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuItem java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuItem.AccessibleAWTMenuItem javax.accessibility.AccessibleAction getAccessibleAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuItem.AccessibleAWTMenuItem javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuItem.AccessibleAWTMenuItem javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuShortcut java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MenuShortcut java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MultipleGradientPaint float[] getFractions()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MultipleGradientPaint java.awt.Color[] getColors()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MultipleGradientPaint java.awt.MultipleGradientPaint.ColorSpaceType getColorSpace()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MultipleGradientPaint java.awt.MultipleGradientPaint.CycleMethod getCycleMethod()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MultipleGradientPaint java.awt.geom.AffineTransform getTransform()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MultipleGradientPaint.ColorSpaceType java.awt.MultipleGradientPaint.ColorSpaceType valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.MultipleGradientPaint.CycleMethod java.awt.MultipleGradientPaint.CycleMethod valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes PageAttributes(java.awt.PageAttributes) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes PageAttributes(java.awt.PageAttributes.ColorType, java.awt.PageAttributes.MediaType, java.awt.PageAttributes.OrientationRequestedType, java.awt.PageAttributes.OriginType, java.awt.PageAttributes.PrintQualityType, int[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes PageAttributes(java.awt.PageAttributes.ColorType, java.awt.PageAttributes.MediaType, java.awt.PageAttributes.OrientationRequestedType, java.awt.PageAttributes.OriginType, java.awt.PageAttributes.PrintQualityType, int[]) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes PageAttributes(java.awt.PageAttributes.ColorType, java.awt.PageAttributes.MediaType, java.awt.PageAttributes.OrientationRequestedType, java.awt.PageAttributes.OriginType, java.awt.PageAttributes.PrintQualityType, int[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes PageAttributes(java.awt.PageAttributes.ColorType, java.awt.PageAttributes.MediaType, java.awt.PageAttributes.OrientationRequestedType, java.awt.PageAttributes.OriginType, java.awt.PageAttributes.PrintQualityType, int[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes PageAttributes(java.awt.PageAttributes.ColorType, java.awt.PageAttributes.MediaType, java.awt.PageAttributes.OrientationRequestedType, java.awt.PageAttributes.OriginType, java.awt.PageAttributes.PrintQualityType, int[]) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes PageAttributes(java.awt.PageAttributes.ColorType, java.awt.PageAttributes.MediaType, java.awt.PageAttributes.OrientationRequestedType, java.awt.PageAttributes.OriginType, java.awt.PageAttributes.PrintQualityType, int[]) 5">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes int[] getPrinterResolution()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes void set(java.awt.PageAttributes) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes void setColor(java.awt.PageAttributes.ColorType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes void setMedia(java.awt.PageAttributes.MediaType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes void setOrientationRequested(java.awt.PageAttributes.OrientationRequestedType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes void setOrigin(java.awt.PageAttributes.OriginType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes void setPrintQuality(java.awt.PageAttributes.PrintQualityType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PageAttributes void setPrinterResolution(int[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Paint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Paint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Paint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PaintContext java.awt.image.Raster getRaster(int, int, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Panel.AccessibleAWTPanel javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Point Point(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Point java.awt.Point getLocation()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Point java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Point void setLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Polygon Polygon(int[], int[], int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Polygon Polygon(int[], int[], int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Polygon boolean contains(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Polygon boolean contains(java.awt.geom.Point2D) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Polygon boolean contains(java.awt.geom.Rectangle2D) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Polygon boolean intersects(java.awt.geom.Rectangle2D) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Polygon java.awt.Rectangle getBoundingBox()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Polygon java.awt.Rectangle getBounds()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Polygon java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Polygon java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform, double)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Polygon java.awt.geom.Rectangle2D getBounds2D()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.PopupMenu.AccessibleAWTPopupMenu javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RadialGradientPaint RadialGradientPaint(java.awt.geom.Point2D, float, java.awt.geom.Point2D, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod, java.awt.MultipleGradientPaint.ColorSpaceType, java.awt.geom.AffineTransform) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RadialGradientPaint RadialGradientPaint(java.awt.geom.Point2D, float, java.awt.geom.Point2D, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod, java.awt.MultipleGradientPaint.ColorSpaceType, java.awt.geom.AffineTransform) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RadialGradientPaint RadialGradientPaint(java.awt.geom.Rectangle2D, float[], java.awt.Color[], java.awt.MultipleGradientPaint.CycleMethod) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RadialGradientPaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RadialGradientPaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RadialGradientPaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RadialGradientPaint java.awt.geom.Point2D getCenterPoint()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RadialGradientPaint java.awt.geom.Point2D getFocusPoint()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle Rectangle(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle Rectangle(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle Rectangle(java.awt.Point, java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle Rectangle(java.awt.Point, java.awt.Dimension) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle Rectangle(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle boolean contains(java.awt.Point)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun contains(p : Point) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle boolean contains(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle boolean contains(java.awt.Rectangle)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun contains(r : Rectangle) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle boolean contains(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle boolean intersects(java.awt.Rectangle)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun intersects(r : Rectangle) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle boolean intersects(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle java.awt.Dimension getSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun getSize() : Dimension&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle java.awt.Point getLocation()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun getLocation() : Point&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle java.awt.Rectangle getBounds()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun getBounds() : Rectangle&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle java.awt.Rectangle intersection(java.awt.Rectangle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun intersection(r : Rectangle) : Rectangle&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle java.awt.Rectangle intersection(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle java.awt.Rectangle union(java.awt.Rectangle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun union(r : Rectangle) : Rectangle&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle java.awt.geom.Rectangle2D createIntersection(java.awt.geom.Rectangle2D)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun createIntersection(r : Rectangle2D) : Rectangle2D&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle java.awt.geom.Rectangle2D createIntersection(java.awt.geom.Rectangle2D) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle java.awt.geom.Rectangle2D createUnion(java.awt.geom.Rectangle2D)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun createUnion(r : Rectangle2D) : Rectangle2D&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle java.awt.geom.Rectangle2D createUnion(java.awt.geom.Rectangle2D) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle java.awt.geom.Rectangle2D getBounds2D()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun getBounds2D() : Rectangle2D&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle void add(java.awt.Point)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun add(pt : Point)&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle void add(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle void add(java.awt.Rectangle)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun add(r : Rectangle) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle void add(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle void setBounds(java.awt.Rectangle)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun setBounds(r : Rectangle) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle void setBounds(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle void setLocation(java.awt.Point)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun setLocation(p : Point) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle void setLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Rectangle void setSize(java.awt.Dimension)">
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun setSize(d : Dimension) : Unit&quot;"/>
        </annotation>
    </item>
    <item name="java.awt.Rectangle void setSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RenderingHints java.lang.Object put(java.lang.Object, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RenderingHints java.lang.Object put(java.lang.Object, java.lang.Object) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RenderingHints void add(java.awt.RenderingHints) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.RenderingHints void putAll(java.util.Map&lt;?,?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Robot java.awt.Color getPixelColor(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Robot java.awt.image.BufferedImage createScreenCapture(java.awt.Rectangle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Robot java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ScrollPane java.awt.Dimension getViewportSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ScrollPane java.awt.Point getScrollPosition()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ScrollPane java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ScrollPane void addImpl(java.awt.Component, java.lang.Object, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ScrollPane void setScrollPosition(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ScrollPane.AccessibleAWTScrollPane javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ScrollPaneAdjustable java.awt.event.AdjustmentListener[] getAdjustmentListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ScrollPaneAdjustable java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.ScrollPaneAdjustable java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Scrollbar T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Scrollbar java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Scrollbar.AccessibleAWTScrollBar javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Scrollbar.AccessibleAWTScrollBar javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Scrollbar.AccessibleAWTScrollBar javax.accessibility.AccessibleValue getAccessibleValue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Shape boolean contains(java.awt.geom.Point2D) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Shape boolean contains(java.awt.geom.Rectangle2D) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Shape boolean intersects(java.awt.geom.Rectangle2D) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Shape java.awt.Rectangle getBounds()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Shape java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Shape java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform, double)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Shape java.awt.geom.Rectangle2D getBounds2D()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.SplashScreen java.awt.Dimension getSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.SplashScreen void setImageURL(java.net.URL) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.SystemColor java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.SystemTray java.awt.TrayIcon[] getTrayIcons()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.SystemTray void add(java.awt.TrayIcon) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextArea java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextArea.AccessibleAWTTextArea javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextComponent T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextComponent java.lang.String getSelectedText()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextComponent java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextComponent.AccessibleAWTTextComponent AccessibleAWTTextComponent(java.awt.TextComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextComponent.AccessibleAWTTextComponent javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextComponent.AccessibleAWTTextComponent javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextComponent.AccessibleAWTTextComponent javax.accessibility.AccessibleText getAccessibleText()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextField T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextField java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TextField.AccessibleAWTTextField javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TexturePaint TexturePaint(java.awt.image.BufferedImage, java.awt.geom.Rectangle2D) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TexturePaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TexturePaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TexturePaint java.awt.PaintContext createContext(java.awt.image.ColorModel, java.awt.Rectangle, java.awt.geom.Rectangle2D, java.awt.geom.AffineTransform, java.awt.RenderingHints) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TexturePaint java.awt.geom.Rectangle2D getAnchorRect()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Toolkit java.awt.Container getNativeContainer(java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Toolkit java.awt.Image createImage(byte[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Toolkit java.awt.event.AWTEventListener[] getAWTEventListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TrayIcon TrayIcon(java.awt.Image) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TrayIcon java.awt.event.ActionListener[] getActionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TrayIcon java.awt.event.MouseListener[] getMouseListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TrayIcon java.awt.event.MouseMotionListener[] getMouseMotionListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TrayIcon void displayMessage(java.lang.String, java.lang.String, java.awt.TrayIcon.MessageType) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TrayIcon void setImage(java.awt.Image) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.TrayIcon.MessageType java.awt.TrayIcon.MessageType valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window boolean postEvent(java.awt.Event) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window java.awt.Window[] getOwnedWindows()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window java.awt.Window[] getOwnerlessWindows()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window java.awt.Window[] getWindows()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window java.util.List&lt;java.awt.Image&gt; getIconImages()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window void applyResourceBundle(java.util.ResourceBundle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window void createBufferStrategy(int, java.awt.BufferCapabilities) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window void processWindowEvent(java.awt.event.WindowEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window void setBounds(java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window void setLocation(java.awt.Point) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window void setSize(java.awt.Dimension) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window void setType(java.awt.Window.Type) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window.AccessibleAWTWindow javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.awt.Window.Type java.awt.Window.Type valueOf(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
</root>

