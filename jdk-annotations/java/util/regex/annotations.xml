<?xml version="1.0" encoding="UTF-8"?>
<root>
    <item name="java.util.regex.MatchResult java.lang.String group()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.lang.String group()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.lang.String group(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.lang.String quoteReplacement(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.lang.String quoteReplacement(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.lang.String replaceAll(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.lang.String replaceAll(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.lang.String replaceFirst(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.lang.String replaceFirst(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.lang.StringBuffer appendTail(java.lang.StringBuffer)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.lang.StringBuffer appendTail(java.lang.StringBuffer) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.MatchResult toMatchResult()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Matcher appendReplacement(java.lang.StringBuffer, java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Matcher appendReplacement(java.lang.StringBuffer, java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Matcher appendReplacement(java.lang.StringBuffer, java.lang.String) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Matcher region(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Matcher reset()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Matcher reset(java.lang.CharSequence)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Matcher reset(java.lang.CharSequence) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Matcher useAnchoringBounds(boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Matcher usePattern(java.util.regex.Pattern)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Matcher usePattern(java.util.regex.Pattern) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Matcher useTransparentBounds(boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Matcher java.util.regex.Pattern pattern()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern boolean matches(java.lang.String, java.lang.CharSequence) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern boolean matches(java.lang.String, java.lang.CharSequence) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.lang.String pattern()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.lang.String quote(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.lang.String quote(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.lang.String[] split(java.lang.CharSequence)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun split(input : CharSequence) : Array&lt;String&gt;&quot;"/>
        </annotation>
    </item>
    <item name="java.util.regex.Pattern java.lang.String[] split(java.lang.CharSequence) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.lang.String[] split(java.lang.CharSequence, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
        <annotation name="jet.runtime.typeinfo.KotlinSignature">
            <val name="value" val="&quot;fun split(input : CharSequence, limit : Int) : Array&lt;String&gt;&quot;"/>
        </annotation>
    </item>
    <item name="java.util.regex.Pattern java.lang.String[] split(java.lang.CharSequence, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.util.regex.Matcher matcher(java.lang.CharSequence)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.util.regex.Matcher matcher(java.lang.CharSequence) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.util.regex.Pattern compile(java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.util.regex.Pattern compile(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.util.regex.Pattern compile(java.lang.String, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.Pattern java.util.regex.Pattern compile(java.lang.String, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.util.regex.PatternSyntaxException java.lang.String getMessage()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
</root>

