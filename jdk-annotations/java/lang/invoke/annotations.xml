<?xml version="1.0" encoding="UTF-8"?>
<root>
    <item name="java.lang.invoke.MethodHandle java.lang.Object invokeWithArguments(java.util.List&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandle java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asFixedArity()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asSpreader(java.lang.Class&lt;?&gt;, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asVarargsCollector(java.lang.Class&lt;?&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle asVarargsCollector(java.lang.Class&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandle java.lang.invoke.MethodHandle bindTo(java.lang.Object)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandleProxies T asInterfaceInstance(java.lang.Class&lt;T&gt;, java.lang.invoke.MethodHandle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandleProxies java.lang.Class&lt;?&gt; wrapperInstanceType(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandleProxies java.lang.invoke.MethodHandle wrapperInstanceTarget(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle arrayElementGetter(java.lang.Class&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle arrayElementSetter(java.lang.Class&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle, java.lang.Class&lt;? extends java.lang.Throwable&gt;, java.lang.invoke.MethodHandle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle constant(java.lang.Class&lt;?&gt;, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.lang.Class&lt;?&gt;...)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.lang.Class&lt;?&gt;...) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle, int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle exactInvoker(java.lang.invoke.MethodType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle...)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle...) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodHandle...) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle identity(java.lang.Class&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle insertArguments(java.lang.invoke.MethodHandle, int, java.lang.Object...) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle insertArguments(java.lang.invoke.MethodHandle, int, java.lang.Object...) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle invoker(java.lang.invoke.MethodType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int...)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int...) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int...) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, int...) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle spreadInvoker(java.lang.invoke.MethodType, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandle spreadInvoker(java.lang.invoke.MethodType, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandles.Lookup lookup()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles java.lang.invoke.MethodHandles.Lookup publicLookup()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle bind(java.lang.Object, java.lang.String, java.lang.invoke.MethodType) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findConstructor(java.lang.Class&lt;?&gt;, java.lang.invoke.MethodType)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findConstructor(java.lang.Class&lt;?&gt;, java.lang.invoke.MethodType) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSpecial(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSpecial(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findSpecial(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType, java.lang.Class&lt;?&gt;) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStatic(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStatic(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticGetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findStaticSetter(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.Class&lt;?&gt;) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findVirtual(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle findVirtual(java.lang.Class&lt;?&gt;, java.lang.String, java.lang.invoke.MethodType) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflect(java.lang.reflect.Method) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectConstructor(java.lang.reflect.Constructor)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectConstructor(java.lang.reflect.Constructor) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectGetter(java.lang.reflect.Field) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectSetter(java.lang.reflect.Field) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectSpecial(java.lang.reflect.Method, java.lang.Class&lt;?&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectSpecial(java.lang.reflect.Method, java.lang.Class&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandle unreflectSpecial(java.lang.reflect.Method, java.lang.Class&lt;?&gt;) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandles.Lookup in(java.lang.Class&lt;?&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodHandles.Lookup java.lang.invoke.MethodHandles.Lookup in(java.lang.Class&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType appendParameterTypes(java.lang.Class&lt;?&gt;...)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType appendParameterTypes(java.lang.Class&lt;?&gt;...) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType appendParameterTypes(java.util.List&lt;java.lang.Class&lt;?&gt;&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType appendParameterTypes(java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType changeParameterType(int, java.lang.Class&lt;?&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType changeReturnType(java.lang.Class&lt;?&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType dropParameterTypes(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType erase()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType fromMethodDescriptorString(java.lang.String, java.lang.ClassLoader)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType fromMethodDescriptorString(java.lang.String, java.lang.ClassLoader) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType generic()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType genericMethodType(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType genericMethodType(int, boolean)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType insertParameterTypes(int, java.lang.Class&lt;?&gt;...)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType insertParameterTypes(int, java.lang.Class&lt;?&gt;...) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType insertParameterTypes(int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType insertParameterTypes(int, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;...) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.Class&lt;?&gt;[]) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.invoke.MethodType)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.lang.invoke.MethodType) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType methodType(java.lang.Class&lt;?&gt;, java.util.List&lt;java.lang.Class&lt;?&gt;&gt;) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType unwrap()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.lang.invoke.MethodType wrap()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MethodType java.util.List&lt;java.lang.Class&lt;?&gt;&gt; parameterList()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.MutableCallSite void syncAll(java.lang.invoke.MutableCallSite[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="java.lang.invoke.SwitchPoint void invalidateAll(java.lang.invoke.SwitchPoint[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
</root>

