<?xml version="1.0" encoding="UTF-8"?>
<root>
    <item name="javax.swing.text.AbstractDocument T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument javax.swing.event.DocumentListener[] getDocumentListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument javax.swing.event.UndoableEditListener[] getUndoableEditListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument javax.swing.text.Element createBranchElement(javax.swing.text.Element, javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument javax.swing.text.Element createLeafElement(javax.swing.text.Element, javax.swing.text.AttributeSet, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument javax.swing.text.Element[] getRootElements()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument void insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument void removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument void render(java.lang.Runnable) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement AbstractElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement boolean containsAttribute(java.lang.Object, java.lang.Object) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement boolean containsAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement boolean isEqual(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement int getIndex(javax.swing.tree.TreeNode) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement javax.swing.text.AttributeSet getAttributes()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement javax.swing.text.Document getDocument()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement void addAttribute(java.lang.Object, java.lang.Object) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement void addAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement void removeAttributes(java.util.Enumeration&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement void removeAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AbstractElement void setResolveParent(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet addAttribute(javax.swing.text.AttributeSet, java.lang.Object, java.lang.Object)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet addAttribute(javax.swing.text.AttributeSet, java.lang.Object, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet addAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet addAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet addAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet getEmptySet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet removeAttribute(javax.swing.text.AttributeSet, java.lang.Object)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet removeAttribute(javax.swing.text.AttributeSet, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, java.util.Enumeration&lt;?&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, java.util.Enumeration&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.AttributeContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.BranchElement java.lang.String getName()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.BranchElement java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.BranchElement void replace(int, int, javax.swing.text.Element[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.Content java.lang.String getString(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.Content javax.swing.text.Position createPosition(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.Content javax.swing.undo.UndoableEdit insertString(int, java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.Content javax.swing.undo.UndoableEdit insertString(int, java.lang.String) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.Content javax.swing.undo.UndoableEdit remove(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.Content void getChars(int, int, javax.swing.text.Segment) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent java.lang.String getRedoPresentationName()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.DefaultDocumentEvent java.lang.String getUndoPresentationName()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.LeafElement LeafElement(javax.swing.text.AbstractDocument, javax.swing.text.Element, javax.swing.text.AttributeSet, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.LeafElement java.lang.String getName()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractDocument.LeafElement java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Document) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Document, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Element) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractWriter AbstractWriter(java.io.Writer, javax.swing.text.Element, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractWriter boolean inRange(javax.swing.text.Element) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractWriter java.lang.String getText(javax.swing.text.Element) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractWriter void output(char[], int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractWriter void text(javax.swing.text.Element) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AbstractWriter void writeAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView int getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView javax.swing.text.AsyncBoxView.ChildState createChildState(javax.swing.text.View)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView javax.swing.text.LayoutQueue getLayoutQueue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView void loadChildren(javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView void paint(java.awt.Graphics, java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView void paint(java.awt.Graphics, java.awt.Shape) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView.ChildLocator int getViewIndexAtPoint(float, float, java.awt.Shape) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView.ChildLocator void paintChildren(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AsyncBoxView.ChildLocator void setAllocation(java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AttributeSet boolean containsAttribute(java.lang.Object, java.lang.Object) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AttributeSet boolean containsAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AttributeSet boolean isEqual(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.AttributeSet java.util.Enumeration&lt;?&gt; getAttributeNames()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView boolean isAfter(int, int, java.awt.Rectangle) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView boolean isBefore(int, int, java.awt.Rectangle) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView javax.swing.SizeRequirements baselineRequirements(int, javax.swing.SizeRequirements)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView javax.swing.SizeRequirements calculateMajorAxisRequirements(int, javax.swing.SizeRequirements)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView javax.swing.text.View getViewAtPoint(int, int, java.awt.Rectangle) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView void childAllocation(int, java.awt.Rectangle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView void forwardUpdate(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView void layoutMajorAxis(int, int, int[], int[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView void paint(java.awt.Graphics, java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView void paint(java.awt.Graphics, java.awt.Shape) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.BoxView void paintChild(java.awt.Graphics, java.awt.Rectangle, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Caret void deinstall(javax.swing.text.JTextComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Caret void install(javax.swing.text.JTextComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Caret void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ComponentView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ComponentView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ComponentView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ComponentView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ComponentView void paint(java.awt.Graphics, java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ComponentView void paint(java.awt.Graphics, java.awt.Shape) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.CompositeView boolean isAfter(int, int, java.awt.Rectangle) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.CompositeView boolean isBefore(int, int, java.awt.Rectangle) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.CompositeView int getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.CompositeView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.CompositeView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.CompositeView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.CompositeView javax.swing.text.View getViewAtPoint(int, int, java.awt.Rectangle) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.CompositeView void childAllocation(int, java.awt.Rectangle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.CompositeView void loadChildren(javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.CompositeView void setParagraphInsets(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret javax.swing.text.Highlighter.HighlightPainter getSelectionPainter()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void deinstall(javax.swing.text.JTextComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void focusGained(java.awt.event.FocusEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void focusLost(java.awt.event.FocusEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void install(javax.swing.text.JTextComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void mouseClicked(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void mouseDragged(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void mouseEntered(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void mouseExited(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void mouseMoved(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void mousePressed(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void mouseReleased(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void moveCaret(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void moveDot(int, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void positionCaret(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultCaret void setDot(int, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit java.lang.String getContentType()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit javax.swing.Action[] getActions()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit javax.swing.text.Document createDefaultDocument()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit void read(java.io.InputStream, javax.swing.text.Document, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit void read(java.io.Reader, javax.swing.text.Document, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit void read(java.io.Reader, javax.swing.text.Document, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit void write(java.io.OutputStream, javax.swing.text.Document, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit void write(java.io.Writer, javax.swing.text.Document, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit void write(java.io.Writer, javax.swing.text.Document, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit.BeepAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit.CopyAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit.CutAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit.DefaultKeyTypedAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit.InsertBreakAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit.InsertContentAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit.InsertTabAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultEditorKit.PasteAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultFormatter java.lang.Object clone()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultFormatter java.lang.Object stringToValue(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultFormatter java.lang.String valueToString(java.lang.Object)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultFormatter java.lang.String valueToString(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultHighlighter java.lang.Object addHighlight(int, int, javax.swing.text.Highlighter.HighlightPainter)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultHighlighter javax.swing.text.Highlighter.Highlight[] getHighlights()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultHighlighter void changeHighlight(java.lang.Object, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultHighlighter void deinstall(javax.swing.text.JTextComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultHighlighter void install(javax.swing.text.JTextComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultHighlighter void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultHighlighter void removeHighlight(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultHighlighter.DefaultHighlightPainter java.awt.Shape paintLayer(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent, javax.swing.text.View) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultHighlighter.DefaultHighlightPainter java.awt.Shape paintLayer(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent, javax.swing.text.View) 5">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultHighlighter.DefaultHighlightPainter void paint(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument DefaultStyledDocument(javax.swing.text.AbstractDocument.Content, javax.swing.text.StyleContext) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument java.awt.Color getBackground(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument java.awt.Color getBackground(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument java.awt.Color getForeground(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument java.awt.Color getForeground(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument java.awt.Font getFont(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument java.awt.Font getFont(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument javax.swing.text.AbstractDocument.AbstractElement createDefaultRoot()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument javax.swing.text.Element getCharacterElement(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument javax.swing.text.Style addStyle(java.lang.String, javax.swing.text.Style)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument void create(javax.swing.text.DefaultStyledDocument.ElementSpec[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument void insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument void removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument void setParagraphAttributes(int, int, javax.swing.text.AttributeSet, boolean) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument.AttributeUndoableEdit AttributeUndoableEdit(javax.swing.text.Element, javax.swing.text.AttributeSet, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer javax.swing.text.Element clone(javax.swing.text.Element, javax.swing.text.Element) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument.ElementBuffer void insertUpdate(javax.swing.text.DefaultStyledDocument.ElementSpec[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument.ElementSpec java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DefaultStyledDocument.SectionElement java.lang.String getName()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Document javax.swing.text.Element[] getRootElements()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Document void render(java.lang.Runnable) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DocumentFilter void insertString(javax.swing.text.DocumentFilter.FilterBypass, int, java.lang.String, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DocumentFilter void insertString(javax.swing.text.DocumentFilter.FilterBypass, int, java.lang.String, javax.swing.text.AttributeSet) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DocumentFilter void remove(javax.swing.text.DocumentFilter.FilterBypass, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DocumentFilter void replace(javax.swing.text.DocumentFilter.FilterBypass, int, int, java.lang.String, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.DocumentFilter void replace(javax.swing.text.DocumentFilter.FilterBypass, int, int, java.lang.String, javax.swing.text.AttributeSet) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.EditorKit java.lang.String getContentType()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.EditorKit javax.swing.Action[] getActions()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.EditorKit javax.swing.text.Document createDefaultDocument()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.EditorKit void deinstall(javax.swing.JEditorPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.EditorKit void install(javax.swing.JEditorPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.EditorKit void read(java.io.InputStream, javax.swing.text.Document, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.EditorKit void read(java.io.Reader, javax.swing.text.Document, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.EditorKit void read(java.io.Reader, javax.swing.text.Document, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.EditorKit void write(java.io.OutputStream, javax.swing.text.Document, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.EditorKit void write(java.io.Writer, javax.swing.text.Document, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.EditorKit void write(java.io.Writer, javax.swing.text.Document, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Element javax.swing.text.AttributeSet getAttributes()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Element javax.swing.text.Document getDocument()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ElementIterator ElementIterator(javax.swing.text.Document) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ElementIterator java.lang.Object clone()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FieldView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FieldView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FieldView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FieldView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FieldView void paint(java.awt.Graphics, java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FieldView void paint(java.awt.Graphics, java.awt.Shape) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FieldView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView javax.swing.text.View createRow()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView void loadChildren(javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView.FlowStrategy int layoutRow(javax.swing.text.FlowView, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView.FlowStrategy javax.swing.text.View createView(javax.swing.text.FlowView, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView.FlowStrategy javax.swing.text.View getLogicalView(javax.swing.text.FlowView) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView.FlowStrategy void adjustRow(javax.swing.text.FlowView, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView.FlowStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView.FlowStrategy void changedUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView.FlowStrategy void insertUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView.FlowStrategy void layout(javax.swing.text.FlowView) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView.FlowStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.FlowView.FlowStrategy void removeUpdate(javax.swing.text.FlowView, javax.swing.event.DocumentEvent, java.awt.Rectangle) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GapContent java.lang.Object allocateArray(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GapContent java.lang.String getString(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GapContent javax.swing.text.Position createPosition(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GapContent javax.swing.undo.UndoableEdit insertString(int, java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GapContent javax.swing.undo.UndoableEdit insertString(int, java.lang.String) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GapContent javax.swing.undo.UndoableEdit remove(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GapContent void getChars(int, int, javax.swing.text.Segment) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GapContent void updateUndoPositions(java.util.Vector, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView GlyphView(javax.swing.text.Element) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView int getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView javax.swing.text.View breakView(int, int, float, float)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView javax.swing.text.View createFragment(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView void paint(java.awt.Graphics, java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView void paint(java.awt.Graphics, java.awt.Shape) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter float getAscent(javax.swing.text.GlyphView) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter float getDescent(javax.swing.text.GlyphView) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter float getHeight(javax.swing.text.GlyphView) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter float getSpan(javax.swing.text.GlyphView, int, int, javax.swing.text.TabExpander, float) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter int getBoundedPosition(javax.swing.text.GlyphView, int, float, float) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter int getNextVisualPositionFrom(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter int viewToModel(javax.swing.text.GlyphView, float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter java.awt.Shape modelToView(javax.swing.text.GlyphView, int, javax.swing.text.Position.Bias, java.awt.Shape) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter void paint(javax.swing.text.GlyphView, java.awt.Graphics, java.awt.Shape, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter void paint(javax.swing.text.GlyphView, java.awt.Graphics, java.awt.Shape, int, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.GlyphView.GlyphPainter void paint(javax.swing.text.GlyphView, java.awt.Graphics, java.awt.Shape, int, int) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Highlighter java.lang.Object addHighlight(int, int, javax.swing.text.Highlighter.HighlightPainter)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Highlighter javax.swing.text.Highlighter.Highlight[] getHighlights()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Highlighter void changeHighlight(java.lang.Object, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Highlighter void deinstall(javax.swing.text.JTextComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Highlighter void install(javax.swing.text.JTextComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Highlighter void paint(java.awt.Graphics) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Highlighter void removeHighlight(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Highlighter.HighlightPainter void paint(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.IconView IconView(javax.swing.text.Element) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.IconView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.IconView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.IconView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.IconView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.IconView void paint(java.awt.Graphics, java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.IconView void paint(java.awt.Graphics, java.awt.Shape) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.InternationalFormatter java.lang.Object clone()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.InternationalFormatter java.lang.Object stringToValue(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.InternationalFormatter java.lang.String valueToString(java.lang.Object)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.InternationalFormatter java.lang.String valueToString(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.InternationalFormatter java.text.Format.Field[] getFields(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent int getScrollableBlockIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent int getScrollableUnitIncrement(java.awt.Rectangle, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent java.awt.Dimension getPreferredScrollableViewportSize()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent java.lang.String getToolTipText(java.awt.event.MouseEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent java.lang.String paramString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent javax.swing.Action[] getActions()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent javax.swing.event.CaretListener[] getCaretListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent javax.swing.text.Keymap addKeymap(java.lang.String, javax.swing.text.Keymap)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent void loadKeymap(javax.swing.text.Keymap, javax.swing.text.JTextComponent.KeyBinding[], javax.swing.Action[]) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent void loadKeymap(javax.swing.text.Keymap, javax.swing.text.JTextComponent.KeyBinding[], javax.swing.Action[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent void processInputMethodEvent(java.awt.event.InputMethodEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent void setDocument(javax.swing.text.Document) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent void setDropMode(javax.swing.DropMode) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent AccessibleJTextComponent(javax.swing.text.JTextComponent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleAction getAccessibleAction()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleEditableText getAccessibleEditableText()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleRole getAccessibleRole()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleStateSet getAccessibleStateSet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent javax.accessibility.AccessibleText getAccessibleText()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent void caretUpdate(javax.swing.event.CaretEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent void changedUpdate(javax.swing.event.DocumentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent void insertUpdate(javax.swing.event.DocumentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent.AccessibleJTextComponent void removeUpdate(javax.swing.event.DocumentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.JTextComponent.DropLocation java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Keymap javax.swing.Action[] getBoundActions()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Keymap javax.swing.KeyStroke[] getBoundKeyStrokes()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Keymap void addActionForKeyStroke(javax.swing.KeyStroke, javax.swing.Action) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.LabelView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.LayeredHighlighter.LayerPainter java.awt.Shape paintLayer(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent, javax.swing.text.View) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.LayeredHighlighter.LayerPainter java.awt.Shape paintLayer(java.awt.Graphics, int, int, java.awt.Shape, javax.swing.text.JTextComponent, javax.swing.text.View) 5">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.LayoutQueue javax.swing.text.LayoutQueue getDefaultQueue()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.MaskFormatter java.lang.Object stringToValue(java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.MaskFormatter java.lang.String valueToString(java.lang.Object)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.MaskFormatter java.lang.String valueToString(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.MutableAttributeSet void addAttribute(java.lang.Object, java.lang.Object) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.MutableAttributeSet void addAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.MutableAttributeSet void removeAttributes(java.util.Enumeration&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.MutableAttributeSet void removeAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.MutableAttributeSet void setResolveParent(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.NavigationFilter int getNextVisualPositionFrom(javax.swing.text.JTextComponent, int, javax.swing.text.Position.Bias, int, javax.swing.text.Position.Bias[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.NavigationFilter void moveDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.NavigationFilter void setDot(javax.swing.text.NavigationFilter.FilterBypass, int, javax.swing.text.Position.Bias) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ParagraphView ParagraphView(javax.swing.text.Element) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ParagraphView int findOffsetToCharactersInString(char[], int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ParagraphView int getClosestPositionTo(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[], int, int) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ParagraphView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ParagraphView javax.swing.text.View breakView(int, float, java.awt.Shape)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ParagraphView javax.swing.text.View createRow()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ParagraphView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ParagraphView void paint(java.awt.Graphics, java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ParagraphView void paint(java.awt.Graphics, java.awt.Shape) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PasswordView int drawEchoCharacter(java.awt.Graphics, int, int, char) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PasswordView int drawSelectedText(java.awt.Graphics, int, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PasswordView int drawUnselectedText(java.awt.Graphics, int, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PasswordView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PasswordView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PasswordView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainDocument javax.swing.text.AbstractDocument.AbstractElement createDefaultRoot()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainDocument void insertUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainDocument void removeUpdate(javax.swing.text.AbstractDocument.DefaultDocumentEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainView int drawSelectedText(java.awt.Graphics, int, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainView int drawUnselectedText(java.awt.Graphics, int, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainView int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainView java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainView void paint(java.awt.Graphics, java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainView void paint(java.awt.Graphics, java.awt.Shape) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.PlainView void updateDamage(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Segment java.lang.CharSequence subSequence(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Segment java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.SimpleAttributeSet SimpleAttributeSet(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.SimpleAttributeSet boolean containsAttribute(java.lang.Object, java.lang.Object) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.SimpleAttributeSet boolean containsAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.SimpleAttributeSet boolean isEqual(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.SimpleAttributeSet java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.SimpleAttributeSet java.util.Enumeration&lt;?&gt; getAttributeNames()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.SimpleAttributeSet void addAttribute(java.lang.Object, java.lang.Object) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.SimpleAttributeSet void addAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.SimpleAttributeSet void removeAttributes(java.util.Enumeration&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.SimpleAttributeSet void removeAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.SimpleAttributeSet void setResolveParent(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StringContent java.lang.String getString(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StringContent javax.swing.text.Position createPosition(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StringContent javax.swing.undo.UndoableEdit insertString(int, java.lang.String)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StringContent javax.swing.undo.UndoableEdit insertString(int, java.lang.String) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StringContent javax.swing.undo.UndoableEdit remove(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StringContent void getChars(int, int, javax.swing.text.Segment) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StringContent void updateUndoPositions(java.util.Vector) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants boolean isBold(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants boolean isItalic(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants boolean isStrikeThrough(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants boolean isSubscript(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants boolean isSuperscript(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants boolean isUnderline(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants float getFirstLineIndent(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants float getLeftIndent(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants float getLineSpacing(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants float getRightIndent(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants float getSpaceAbove(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants float getSpaceBelow(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants int getAlignment(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants int getBidiLevel(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants int getFontSize(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants java.awt.Color getBackground(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants java.awt.Color getBackground(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants java.awt.Color getForeground(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants java.awt.Color getForeground(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants java.awt.Component getComponent(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants java.lang.String getFontFamily(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants java.lang.String getFontFamily(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants javax.swing.Icon getIcon(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants javax.swing.text.TabSet getTabSet(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setAlignment(javax.swing.text.MutableAttributeSet, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setBackground(javax.swing.text.MutableAttributeSet, java.awt.Color) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setBidiLevel(javax.swing.text.MutableAttributeSet, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setBold(javax.swing.text.MutableAttributeSet, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setComponent(javax.swing.text.MutableAttributeSet, java.awt.Component) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setFirstLineIndent(javax.swing.text.MutableAttributeSet, float) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setFontFamily(javax.swing.text.MutableAttributeSet, java.lang.String) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setFontSize(javax.swing.text.MutableAttributeSet, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setForeground(javax.swing.text.MutableAttributeSet, java.awt.Color) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setIcon(javax.swing.text.MutableAttributeSet, javax.swing.Icon) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setItalic(javax.swing.text.MutableAttributeSet, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setLeftIndent(javax.swing.text.MutableAttributeSet, float) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setLineSpacing(javax.swing.text.MutableAttributeSet, float) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setRightIndent(javax.swing.text.MutableAttributeSet, float) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setSpaceAbove(javax.swing.text.MutableAttributeSet, float) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setSpaceBelow(javax.swing.text.MutableAttributeSet, float) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setStrikeThrough(javax.swing.text.MutableAttributeSet, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setSubscript(javax.swing.text.MutableAttributeSet, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setSuperscript(javax.swing.text.MutableAttributeSet, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setTabSet(javax.swing.text.MutableAttributeSet, javax.swing.text.TabSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleConstants void setUnderline(javax.swing.text.MutableAttributeSet, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext java.awt.Color getBackground(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext java.awt.Color getForeground(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext java.awt.Color getForeground(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext java.awt.Font getFont(java.lang.String, int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext java.awt.Font getFont(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext java.awt.Font getFont(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext java.lang.Object getStaticAttributeKey(java.lang.Object)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext java.lang.Object getStaticAttributeKey(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet addAttribute(javax.swing.text.AttributeSet, java.lang.Object, java.lang.Object)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet addAttribute(javax.swing.text.AttributeSet, java.lang.Object, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet addAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet addAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet addAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet getEmptySet()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttribute(javax.swing.text.AttributeSet, java.lang.Object)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttribute(javax.swing.text.AttributeSet, java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, java.util.Enumeration&lt;?&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, java.util.Enumeration&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.AttributeSet removeAttributes(javax.swing.text.AttributeSet, javax.swing.text.AttributeSet) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.MutableAttributeSet createLargeAttributeSet(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.Style addStyle(java.lang.String, javax.swing.text.Style)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext javax.swing.text.StyleContext.SmallAttributeSet createSmallAttributeSet(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext void readAttributeSet(java.io.ObjectInputStream, javax.swing.text.MutableAttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext void readAttributes(java.io.ObjectInputStream, javax.swing.text.MutableAttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext void registerStaticAttributeKey(java.lang.Object) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext void writeAttributeSet(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext void writeAttributeSet(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext void writeAttributes(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext void writeAttributes(java.io.ObjectOutputStream, javax.swing.text.AttributeSet) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle NamedStyle(javax.swing.text.StyleContext) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle NamedStyle(javax.swing.text.StyleContext, java.lang.String, javax.swing.text.Style) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle T[] getListeners(java.lang.Class&lt;T&gt;)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle T[] getListeners(java.lang.Class&lt;T&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle boolean containsAttribute(java.lang.Object, java.lang.Object) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle boolean containsAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle boolean isEqual(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle javax.swing.event.ChangeListener[] getChangeListeners()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle javax.swing.text.AttributeSet copyAttributes()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle void addAttribute(java.lang.Object, java.lang.Object) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle void addAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle void removeAttributes(java.util.Enumeration&lt;?&gt;) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle void removeAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.NamedStyle void setResolveParent(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.SmallAttributeSet SmallAttributeSet(javax.swing.text.StyleContext, javax.swing.text.AttributeSet) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.SmallAttributeSet boolean containsAttribute(java.lang.Object, java.lang.Object) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.SmallAttributeSet boolean containsAttributes(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.SmallAttributeSet boolean isEqual(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.SmallAttributeSet java.lang.Object clone()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.SmallAttributeSet java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.SmallAttributeSet java.util.Enumeration&lt;?&gt; getAttributeNames()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyleContext.SmallAttributeSet javax.swing.text.AttributeSet copyAttributes()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledDocument java.awt.Color getBackground(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledDocument java.awt.Color getBackground(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledDocument java.awt.Color getForeground(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledDocument java.awt.Color getForeground(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledDocument java.awt.Font getFont(javax.swing.text.AttributeSet)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledDocument java.awt.Font getFont(javax.swing.text.AttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledDocument javax.swing.text.Element getCharacterElement(int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledDocument javax.swing.text.Style addStyle(java.lang.String, javax.swing.text.Style)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledDocument void setParagraphAttributes(int, int, javax.swing.text.AttributeSet, boolean) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit java.lang.Object clone()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit javax.swing.Action[] getActions()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit javax.swing.text.Document createDefaultDocument()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit javax.swing.text.ViewFactory getViewFactory()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit void createInputAttributes(javax.swing.text.Element, javax.swing.text.MutableAttributeSet) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit void createInputAttributes(javax.swing.text.Element, javax.swing.text.MutableAttributeSet) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit void deinstall(javax.swing.JEditorPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit void install(javax.swing.JEditorPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.AlignmentAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.BoldAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.FontFamilyAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.FontSizeAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.ForegroundAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.ItalicAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.StyledTextAction javax.swing.text.StyledDocument getStyledDocument(javax.swing.JEditorPane)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.StyledTextAction javax.swing.text.StyledDocument getStyledDocument(javax.swing.JEditorPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.StyledTextAction javax.swing.text.StyledEditorKit getStyledEditorKit(javax.swing.JEditorPane)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.StyledTextAction javax.swing.text.StyledEditorKit getStyledEditorKit(javax.swing.JEditorPane) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.StyledTextAction void setCharacterAttributes(javax.swing.JEditorPane, javax.swing.text.AttributeSet, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.StyledTextAction void setParagraphAttributes(javax.swing.JEditorPane, javax.swing.text.AttributeSet, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.StyledEditorKit.UnderlineAction void actionPerformed(java.awt.event.ActionEvent) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TabSet java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TabStop java.lang.String toString()">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TableView javax.swing.SizeRequirements calculateMinorAxisRequirements(int, javax.swing.SizeRequirements)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TableView javax.swing.text.TableView.TableCell createTableCell(javax.swing.text.Element)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TableView javax.swing.text.TableView.TableRow createTableRow(javax.swing.text.Element)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TableView void forwardUpdate(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TableView void layoutColumns(int, int[], int[], javax.swing.SizeRequirements[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TableView void layoutColumns(int, int[], int[], javax.swing.SizeRequirements[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TableView.TableRow void layoutMajorAxis(int, int, int[], int[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TextAction javax.swing.Action[] augmentList(javax.swing.Action[], javax.swing.Action[])">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TextAction javax.swing.Action[] augmentList(javax.swing.Action[], javax.swing.Action[]) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.TextAction javax.swing.Action[] augmentList(javax.swing.Action[], javax.swing.Action[]) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int drawTabbedText(javax.swing.text.Segment, int, int, java.awt.Graphics, javax.swing.text.TabExpander, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getBreakLocation(javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getNextWord(javax.swing.text.JTextComponent, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getPositionAbove(javax.swing.text.JTextComponent, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getPositionBelow(javax.swing.text.JTextComponent, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getPreviousWord(javax.swing.text.JTextComponent, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getRowEnd(javax.swing.text.JTextComponent, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getRowStart(javax.swing.text.JTextComponent, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getTabbedTextOffset(javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getTabbedTextOffset(javax.swing.text.Segment, java.awt.FontMetrics, int, int, javax.swing.text.TabExpander, int, boolean) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getTabbedTextWidth(javax.swing.text.Segment, java.awt.FontMetrics, int, javax.swing.text.TabExpander, int) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getWordEnd(javax.swing.text.JTextComponent, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities int getWordStart(javax.swing.text.JTextComponent, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.Utilities javax.swing.text.Element getParagraphElement(javax.swing.text.JTextComponent, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View int getNextVisualPositionFrom(int, javax.swing.text.Position.Bias, java.awt.Shape, int, javax.swing.text.Position.Bias[]) 4">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 2">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View int viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[]) 3">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View java.awt.Shape modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View javax.swing.text.View createFragment(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View void forwardUpdate(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View void forwardUpdateToView(javax.swing.text.View, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View void forwardUpdateToView(javax.swing.text.View, javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View void paint(java.awt.Graphics, java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View void paint(java.awt.Graphics, java.awt.Shape) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.View void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ViewFactory javax.swing.text.View create(javax.swing.text.Element) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.WrappedPlainView int drawSelectedText(java.awt.Graphics, int, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.WrappedPlainView int drawUnselectedText(java.awt.Graphics, int, int, int, int) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.WrappedPlainView void changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.WrappedPlainView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.WrappedPlainView void loadChildren(javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.WrappedPlainView void paint(java.awt.Graphics, java.awt.Shape) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.WrappedPlainView void paint(java.awt.Graphics, java.awt.Shape) 1">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.WrappedPlainView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ZoneView boolean isZoneLoaded(javax.swing.text.View) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ZoneView boolean updateChildren(javax.swing.event.DocumentEvent.ElementChange, javax.swing.event.DocumentEvent, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ZoneView javax.swing.text.View createZone(int, int)">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ZoneView void insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ZoneView void loadChildren(javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ZoneView void removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
    <item name="javax.swing.text.ZoneView void unloadZone(javax.swing.text.View) 0">
        <annotation name="org.jetbrains.annotations.NotNull"/>
    </item>
</root>

