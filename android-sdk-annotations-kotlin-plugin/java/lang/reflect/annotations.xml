<root>
    <item name='java.lang.reflect.AnnotatedElement T getAnnotation(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.AnnotatedElement boolean isAnnotationPresent(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun isAnnotationPresent(annotationClass : Class&lt;out Annotation&gt;) : Boolean&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.Array void set(java.lang.Object, int, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Field ORDER_BY_NAME_AND_DECLARING_CLASS'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array java.lang.Object get(java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Method java.lang.String toGenericString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array java.lang.Object newInstance(java.lang.Class&lt;?&gt;, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Proxy boolean isProxyClass(java.lang.Class&lt;?&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.AccessibleObject T getAnnotation(java.lang.Class&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Annotation&gt; getAnnotation(annotationClass : Class&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.AccessibleObject T getAnnotation(java.lang.Class&lt;T&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Proxy java.lang.Object newProxyInstance(java.lang.ClassLoader, java.lang.Class&lt;?&gt;[], java.lang.reflect.InvocationHandler) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array char getChar(java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Field java.lang.String toGenericString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array void setByte(java.lang.Object, int, byte) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array long getLong(java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array void setDouble(java.lang.Object, int, double) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Constructor boolean isAnnotationPresent(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.AccessibleObject void setAccessible(java.lang.reflect.AccessibleObject[], boolean)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun setAccessible(array : Array&lt;out AccessibleObject&gt;, flag : Boolean) : Unit&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.Proxy java.lang.Object newProxyInstance(java.lang.ClassLoader, java.lang.Class&lt;?&gt;[], java.lang.reflect.InvocationHandler) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.AnnotatedElement T getAnnotation(java.lang.Class&lt;T&gt;)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun &lt;T : Annotation&gt; getAnnotation(annotationClass : Class&lt;T&gt;) : T?&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.Method A getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Field boolean isAnnotationPresent(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array void setShort(java.lang.Object, int, short) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array java.lang.Object newInstance(java.lang.Class&lt;?&gt;, int...) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.InvocationHandler java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.AccessibleObject java.lang.annotation.Annotation[] getDeclaredAnnotations()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDeclaredAnnotations() : Array&lt;out Annotation&gt;&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.Proxy java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Method boolean isAnnotationPresent(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array void setBoolean(java.lang.Object, int, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array void setInt(java.lang.Object, int, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Constructor java.lang.String toGenericString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.GenericDeclaration java.lang.reflect.TypeVariable&lt;?&gt;[] getTypeParameters()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getTypeParameters() : Array&lt;out TypeVariable&lt;out GenericDeclaration?&gt;?&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.Constructor A getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Constructor java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array double getDouble(java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array void setFloat(java.lang.Object, int, float) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Member java.lang.Class&lt;?&gt; getDeclaringClass()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDeclaringClass() : Class&lt;out Any&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.Array void setLong(java.lang.Object, int, long) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Field java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array int getInt(java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array java.lang.Object newInstance(java.lang.Class&lt;?&gt;, int...)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newInstance(componentType : Class&lt;out Any&gt;, vararg dimensions : Int) : Any&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.Array java.lang.Object newInstance(java.lang.Class&lt;?&gt;, int...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.AnnotatedElement java.lang.annotation.Annotation[] getDeclaredAnnotations()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDeclaredAnnotations() : Array&lt;out Annotation&gt;&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.Proxy java.lang.Class&lt;?&gt; getProxyClass(java.lang.ClassLoader, java.lang.Class&lt;?&gt;...) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Method ORDER_BY_SIGNATURE'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Method java.lang.annotation.Annotation[][] getParameterAnnotations()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getParameterAnnotations() : Array&lt;Array&lt;Annotation&gt;&gt;&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.Field A getAnnotation(java.lang.Class&lt;A&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.AccessibleObject java.lang.annotation.Annotation[] getAnnotations()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getAnnotations() : Array&lt;out Annotation&gt;&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.Array int getLength(java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array void setChar(java.lang.Object, int, char) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array byte getByte(java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array boolean getBoolean(java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array short getShort(java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.AccessibleObject boolean isAnnotationPresent(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.AnnotatedElement java.lang.annotation.Annotation[] getAnnotations()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getAnnotations() : Array&lt;out Annotation&gt;&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.Modifier java.lang.String toString(int)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Constructor java.lang.Class&lt;T&gt; getDeclaringClass()'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun getDeclaringClass() : Class&lt;out T&gt;?&quot;"/>
        </annotation>
    </item>
    <item name='java.lang.reflect.AnnotatedElement boolean isAnnotationPresent(java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array float getFloat(java.lang.Object, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.AccessibleObject void setAccessible(java.lang.reflect.AccessibleObject[], boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Constructor java.lang.annotation.Annotation[][] getParameterAnnotations()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Method java.lang.String toString()'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='java.lang.reflect.Array java.lang.Object newInstance(java.lang.Class&lt;?&gt;, int)'>
        <annotation name='jet.runtime.typeinfo.KotlinSignature'>
            <val name="value" val="&quot;fun newInstance(componentType : Class&lt;out Any&gt;, length : Int) : Any&quot;"/>
        </annotation>
    </item>
</root>
