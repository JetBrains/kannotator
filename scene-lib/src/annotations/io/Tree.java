package annotations.io;


public interface Tree {

    public enum Kind {
        ANNOTATION,
        ARRAY_ACCESS,
        ARRAY_TYPE,
        ASSERT,
        ASSIGNMENT,
        BLOCK,
        BREAK,
        CASE,
        CATCH,
        CLASS,
        COMPILATION_UNIT,
        CONDITIONAL_EXPRESSION,
        CONTINUE,
        DO_WHILE_LOOP,
        ENHANCED_FOR_LOOP,
        EXPRESSION_STATEMENT,
        MEMBER_SELECT,
        FOR_LOOP,
        IDENTIFIER,
        IF,
        IMPORT,
        INSTANCE_OF,
        LABELED_STATEMENT,
        METHOD,
        METHOD_INVOCATION,
        MODIFIERS,
        NEW_ARRAY,
        NEW_CLASS,
        PARENTHESIZED,
        PRIMITIVE_TYPE,
        RETURN,
        EMPTY_STATEMENT,
        SWITCH,
        SYNCHRONIZED,
        THROW,
        TRY,
        PARAMETERIZED_TYPE,
        UNION_TYPE,
        TYPE_CAST,
        TYPE_PARAMETER,
        VARIABLE,
        WHILE_LOOP,
        POSTFIX_INCREMENT,
        POSTFIX_DECREMENT,
        PREFIX_INCREMENT,
        PREFIX_DECREMENT,
        UNARY_PLUS,
        UNARY_MINUS,
        BITWISE_COMPLEMENT,
        LOGICAL_COMPLEMENT,
        MULTIPLY,
        DIVIDE,
        REMAINDER,
        PLUS,
        MINUS,
        LEFT_SHIFT,
        RIGHT_SHIFT,
        UNSIGNED_RIGHT_SHIFT,
        LESS_THAN,
        GREATER_THAN,
        LESS_THAN_EQUAL,
        GREATER_THAN_EQUAL,
        EQUAL_TO,
        NOT_EQUAL_TO,
        AND,
        XOR,
        OR,
        CONDITIONAL_OR,
        MULTIPLY_ASSIGNMENT,
        DIVIDE_ASSIGNMENT,
        REMAINDER_ASSIGNMENT,
        PLUS_ASSIGNMENT,
        MINUS_ASSIGNMENT,
        LEFT_SHIFT_ASSIGNMENT,
        RIGHT_SHIFT_ASSIGNMENT,
        UNSIGNED_RIGHT_SHIFT_ASSIGNMENT,
        AND_ASSIGNMENT,
        XOR_ASSIGNMENT,
        OR_ASSIGNMENT,
        INT_LITERAL,
        LONG_LITERAL,
        FLOAT_LITERAL,
        DOUBLE_LITERAL,
        BOOLEAN_LITERAL,
        CHAR_LITERAL,
        STRING_LITERAL,
        NULL_LITERAL,
        UNBOUNDED_WILDCARD,
        EXTENDS_WILDCARD,
        SUPER_WILDCARD,
        ERRONEOUS,
        INTERFACE,
        ENUM,
        ANNOTATION_TYPE,
        OTHER
    }

    Kind getKind();
}